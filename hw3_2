def hw3_part2():
    print("[HW #3 PART 2] Student ID: {} Name: {}".format("2076017", "Sunho Kwak"))
    mode = input("Select the mode between TX and RX (TX:1, RX:2): ")

    if mode == "1":  # TX
        data = input("Type information bits that you want to send ex) 1 0 0 1 1 0 1 : ")
        generator = input("Type generator bits: ")
        crc, codeword = crc_shift_register(data, generator)
        print("CRC bits calculated by CCITT-16:", crc)
        print("The complete codeword:", codeword)
        print("Done...")

    elif mode == "2":  # RX
        codeword = input("Type the codeword that RX received: ex) x x x ... x x: ")
        generator = input("Type generator bits: ")
        crc_check(codeword, generator)
        print("Done...")

    else:
        print("Select 1 or 2 again.")



def crc_shift_register(data, generator):
    data = list(map(int, data))  
    generator = list(map(int, generator)) 

    shift_register = data[:]  
                            
    shift_register += [0] * (len(generator) - 1)  

    for i in range(len(data)):
        if shift_register[i] == 1:  
            for j in range(len(generator)):
                shift_register[i + j] ^= generator[j] 
                                                     

    crc = shift_register[-(len(generator) - 1):] 
                                                
    codeword = data + crc 
    return crc, codeword


   
def crc_check(codeword, generator):
    codeword = list(map(int, codeword))
    generator = list(map(int, generator))

    crc, codeword = crc_shift_register(codeword, generator)

    error_detected = False

    for bit in crc:
        if bit != 0:
            error_detected = True
            break

    if error_detected:
        print("An error is detected!")
    else:
        print("An error is not detected!")


# test
hw3_part2()


